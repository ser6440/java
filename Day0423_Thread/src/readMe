Thread(스레드)
: 프로세스 내에서의 명령의 처리 흐름

(멀티)스레드 사용이유: 병렬처리를 하기 위해서

스레드가 하나인 상태에서는 명령의 흐름이 단방향이다.동시에 일을 할 수 없다.
병렬처리를 위한 방법: 멀티 프로세스 ,멀티스레드

프로세스: 소프트웨어의 실행단위
          프로세스는 최소한 하나의 스레드를 가진다. 
스레드: 프로세스 내에서의 명령 실행 단위

일의 병렬처리를 위해서는 멀티 프로세스 또는 멀티 스레드가 있다.
   
멀티프로세스: 여러 프로그램을 동시에 실행, 각각 다른 프로그램이 실행되는 것이기 때문에 
                      데이터 공유에 불편함이 있다.
멀티스레드:하나의 메모리 공간을 공유하면서 실행되기 때문에 데이터 공유 문제점이 적다.

프로세스는 프로그램을 실행하는 단위이기 때문에 최소 하나의 스레드(메인 스레드)를 가진다.
메인스레드는 개발자가 만들지 않고 알아서 만들어준다.
저희가 하려고 하는 작업은 멀티스레드(multi-thread) 

(멀티)스레드를 만드는 방법: Tread 클래스의 start() 메서드를 호출하면 스레드가 하나 생성됨

우리가 실행하고자 하는 명령을 멀티스레드에서 동작시키는 방법
1. 스레드 클래스를 상속(extends)받아서 run()메서드를 재정의(오버라이딩)
2. runnable 인터페이스를 구현해서 Thread를 이용하여 실행하는 방법
   Thread가 Runnable을 구현했기 때문에, Runnable을 구현해서 Thread에 넣어주면 됨    
                  
개발자가 만들어서 실행한 스레드: 파생 스레드

스레드 사용 예: 작업 처리가 오래걸릴 때 사용                      
              
동기화(synchronization)
왜 문제인가???
스레드는 공통된 메모리공간에 함께 접근할 수 있음
: 한편으로는 자원을 함께 사용하기 때문에 데이터를 주고 받을 필요가 없기때문에 유용하지만
    같은 데이터를 사용함으로써 동기화 문제가 발생할 수 있다.

동기화 문제 해결방법: 여러 스레드가 자원에 한꺼번에 접근하지 못하게 막음
(임계구역 설정: 다른 스레드가 사용중일때는 사용을 금지한다.)
synchronized 키워드를 사용하고자 하는 메서드에 선언

생산자-소비자 문제
자원의 불균형에 의한 문제가 발생
동기화 문제를 해결했음에도
생산자가 생산한 데이터를 소비자가 사용하지 못하거나(공급과잉)
생산자가 데이터를 생산하지 않았는데 소비자는 데이터를 계속해서 사용하는(공급부족) 문제가 발생할 수 있다.

wait(), notify() 메서드를 이용해서 생산자-소비자 문제를 해결할 수 있음

wait(): 누군가 깨워줄때 까지 스레드의 진행을 멈춤 
notifyAll(): 자원을 모두 사용했음을 다른 스레드에게 알려줌

    
              