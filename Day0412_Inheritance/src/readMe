static 변수(정적변수),
static메서드(정적메드)

//static 메서드에서는 non-static 변수를 사용하지 못함

객체 new 생성자() 했을때 생성됨
Student s1;
(name, grade)
s = new Student();
Student s1 = new Student();
s1.setName("홍길동");
s1.name
Student s2 = new Student();
s2.setName("이순신");
s2.name

인스턴스변수 객체마다 생성되는 변수

인스턴스 -객체를 지칭하는 변수

<클래스>
변수 - 인스턴스 변수(각 개체가 가지고 있는 변수)
   - static변수 (클래스 당 하나, 모든 객체가 공유하는 변수)객체가 없어도 존재하는 변수   
   모든 객체가 동일한 값을 가지는 변수가 존재할 때, 객체마다 해당 변수를 생성하여주면
   동일한 값을 가지는 변수가 계속 생성되는 것이다. 
   그래서 모든 객체가 똑같은 데이터를 가지는 변수를 사용할 때는 static변수를 이용한다.
   
메서드
static method: 객체의 상태와 상관없이 항상 동일한 동작을 할때
static변수와, static method는
static Way(클래스 이름으로 접근)로 사용한다.
객체가 없어도 사용할 수 있기 때문에 객체로 접근하는 방식은 옳지못하다.

Inheritance(상속)

접근제한자(public/private/protected/(default))
public: 외부 클래스에서 접근을 허용
private: 외부 클래스에서 접근을 허용하지 않음
default: 접근제한자를 적어주지 않았을 때, 
                    같은 패키지 내에 있는 외부 클래스라면 접근을 허용
                    다른 패키지라면 접근 허용X
protected: 아무 접근제한자를 적어주지 않았을 경우(default)와 동일하나
                        상속관계에 있는 경우, 접근을 허용
                        
부모클래스: 상속을 해주는 클래스
자식클래스: 상속을 받는 클래스

자식클래스는 부모클래스에 선언된 변수나, 메서드를 포함하고 있다.
자식클래스의 객체를 만들때는 부모클래스의 객체도 함께 생성이 된다.
-자식클래스의 생성자가 호출되면, 생성자의 가장 맨 윗줄에서는 부모클래스의 생성자가 호출되어야 한다.
만약, 호출하지 않으면 부모클래스의 기본 생성자가 생략되어 있는 것과 같다.
부모클래스의 기본 생성자:super(); (조상이 여러개다 라고 한다면 직계조상을 의미한다.)

super
자식클래스내에서 부모클래스의 객체를 지칭하는 키워드

자식클래스의 객체는 부모클래스의 객체도 포함하고 있으므로, 부모 객체처럼 취급할 수 있다.
(자식 클래스의 객체는 부모클래스의 참조변수에 참조할 수 있다, is-a 관계에 있을 때, 객체는 참조 가능하다)

스포츠카는 자동차이다. SportsCar is a Car.
예) Car c1 = new SportsCar();
c1<<<부모클래스에 자식클래스가 참조되어 있더라도, 부모클래스의 참조변수를 통해서는 자식클래스의 기능, 변수를 사용할 수 없다.
굳이 사용하고 싶다면 형변환을 통해서 사용해야한다.
1. SportsCar c2 = new (SportsCar)c1;
    c2.turboOn();
2. ((SportsCar)c1).turboOn();

단, 
Car is a SportsCar? 거짓
SportsCar myCar = new Car(); -> X, 부모클래스의 객체는 자식클래스의 객체에 참조하지 못한다.
 
 
 instanceof: 인스턴스가 어느 클래스의 객체인지 확인하는 연산자
 (특히 부모클래스의 참조변수에 참조되어있는 객체가 어떤 자식클래스의 객체인지 확인할 때 사용)
 