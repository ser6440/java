TCP통신
TCP통신을 위해서는 연결을 미리 만들어 놓고 시작한다.
Socket을 통해서 데이터를 주고 받음
데이터를 주고받는 장치간 연결해주는 Socket을 만들어 놓고 시작한다.

데이터를 보내는 쪽과 받는 쪽의 역할이 다름
처음에 데이터를 보내기 위해서 연결 요청이 필요

echo Server: 내가 보낸 메시지를 그대로 다시 전달하는 서버
TcpClient2, TcpServer2 클래스 작성하기
TcpClient2: 연결 맺고 나서 하는 일은 메시지 보내고 나서 받기 반복
TcpServer2: 연결 맺고 나서 메시지 받고 나서 보내기 반복

TCP 1:1채팅 만들기
hint
1. TCP는 연결 요청하는 쪽(Client1)과 연결 받는 쪽(Client2)이 따로 존재해야 한다.
2. 보내고 받기 위해서는(sender Thread, receiver Thread) 둘다 같은 socketㅇ르 이용한다.
3. 보내는 기능과 받기 기능은 동시에 실행되어야 한다. (Thread)
4. 보내고 받는 기능과 소켓 생성 기능을 분리하면 편하다.

TcpClient1(소켓 연결 요청하는 채팅 클라이언트)
TcpClient2(소켓 연결 요청 수락하는 채팅 클라이언트)
Sender
Receiver

여전히 1:1채팅
1. 아까전에 만든 Sender, Receiver, TcpClient1을 그대로 활용 (서버1개,클라이언트(TcpClient1사용)2개)
2. 서버는 메시지를 받아서 상대방에게 주는 동작을 동시에 진행해야 한다. 
       서버는 각 소켓으로부터 메시지를 받아서 처리하는 기능이 병렬적으로 수행되어야 한다.
       총 스레드는 6개(각 클라이언트 2개씩, 서버2개)
       
순서대로 진행
1. 서버를 실행하면 서버는 2개의 클라이언트로 부터 요청이 들어오기를 기다린다.
2. 2개의 클라이언트로 부터 요청이 모두 들어오면, 각 클라이언트로 부터 들어오는 
      메시지를 받아서, 다른 클라이언트에게 전달한다.
             
             
Sender, Receiver TcpClient(요청하는 쪽)
그대로 사용

Server
: 1대1 채팅을 하기 위해서 각각의 클라이언트들과 연결이 되어야 하고
  2개의 클라이언트와 통신하기 위한 2개의 소켓이 필요하다
  2번의 연결 소켓이 필요하다.
  
하나의 클라이언트로 부터 메시지를 받아서 다른 클라이언트로 전달하는 기능이 필요
이 기능이, 각각의 클라이언트에 적용되어야한다.(각 클라이언트 별로 하나씩 실행되어야 한다. 동시에, 병렬적으로)

일대다 채팅
서버의 기능을 확장시키면 된다.
지금 1:1 서버는 소켓을 2개 저장할 수 있고, 요청을 2번만 받음
>> 제한 없이 저장, 제한 없이 요청받음
               
               
Sender, Receiver, Client >>그대로 사용

Server
:아까랑 달라진점은
소켓 2개를 저장하는게 아니라... 여러개 저장>>> List
소켓 연결이 들어오면 List에 담아주고, 각 소켓 별로 서버 동작하는 기능 thread실행

서버동작
: 소켓으로 부터 메시지를 받아서, List에 있는 모든 소켓에 메시지 전달
단, 메시지를 전달받은 소켓은 제외

스레드 실행, List를 가지고 있는 Class를 따로 작성 >> ServerManager
Server가 할일
: 연결요청받아서 소켓을 ServerManager로 넘겨줌

ServerManager가 할일
: 전달받은 소켓을 저장, 서버가 할일을 스레드로 실행

                              