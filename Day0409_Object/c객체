객체
:상태값과 동작을 가지고 있다. (데이터를 저장할 수 있고, 메서드를 가지고 있다)

객체를 만들어내기 위해서는 클래스가 필요하다

클래스
객체를 만들어내는 도면, 그래서 클래스의 구성은 객체가 상태값을 가지고 동작을 할 수 있도록
구성되어있다.
상태값을 가질 수 있도록 변수가 있고: 멤버 변수, 필드
동작을 할 수 있도록 메서드가 있음: 멤버 메서드, 멤버함수

지금 해볼것
색깔(문자열), 현재속도(정수), 주행거리(정수)의 상태값을 가지고
출발, 정지, 상태출력의 기능을 할 수 있는 객체 만들어보기


메서드 호출 시 값을 넘겨주는 방법(변수의 타입에 따른 데이터 전달의 차이점)
값에 의한 전달(call by Value): 기초자료형
	값 자체가 복사되어서 전달되기 때문에 전달 받은 쪽에서 값을 바꾸더라도 전달한 쪽에 영향을 주지 못한다.
참조에 의한 전달(call by reference) : 참조자료형
	전달하고자 하는 객체의 주소를 전달하기 때문에 전달 받은 쪽에서 객체의 데이터를 조작하게 되면
	원래 객체의 데이터가 바뀐다.
	
클래스 구성요소
멤버변수
멤버 메서드
생성자: 객체생성의 역할을 담당하면서, 멤버변수의 초기화를 담당한다.
(숫자(정수,실수):0, 객체(참조자료형):null, char: '', boolean: false)->초기화값을 안주었을때 생기는 기본값
개발자가 클래스를 선언하고, 생성자를 작성하지 않으면 기본 생성자는 컴파일러가 만들어준다.
일종의 메서드, 단, 반환형이 없고 이름이 클래스의 이름과 동일해야한다.
생성자(Constructor)의 모양
[수식자] 클래스의 이름([매개변수]){

}	
//기본생성자(Default Constructor): 매개변수가 없는 생성자
//수식자는 보통의 경우 public
ex) Multiplier 클래스의 기본생성자
public Multiplier(){

}

기본생성자가 아닌 생성자
객체를 만들때 외부로 부터 값을 받아와서 멤버변수를 초기화해야 할때 사용
public Multiplier(int number){

}

//메서드 오버로딩(Overloading) <==>	메서드 오버라이딩(Overriding)
*************************다르다****************************

오버로딩: 이름이 같은 메서드를 여러개 선언
	  :단, 매개변수가 달라야 함: 매개변수의 자료형이나, 순서가 달라야한다.
		반환형이 달라도 매개변수가 같으면 안된다.	  		
		m.multiplyInt(1,2) ;
		m.multiplyDouble(1.2,3.3);
		정수 실수 둘다
		m.multiply(1,2);
		m.multiply(1.2,3.3);
		
		같은 이름의 메서드를 사용하게 하고 싶다. 

클래스
객체
